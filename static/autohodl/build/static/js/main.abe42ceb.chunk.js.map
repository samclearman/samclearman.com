{"version":3,"sources":["components/NoWalletDetected.js","components/NetworkErrorMessage.js","components/ConnectWallet.js","components/Loading.js","components/Transfer.js","components/Withdraw.js","components/TransactionErrorMessage.js","components/WaitingForTransactionMessage.js","components/NoTokensMessage.js","components/Dapp.js","index.js"],"names":["NoWalletDetected","className","href","target","rel","NetworkErrorMessage","message","dismiss","role","type","data-dismiss","aria-label","onClick","aria-hidden","ConnectWallet","connectWallet","networkError","Loading","style","position","zIndex","top","left","width","height","background","marginLeft","marginTop","textAlign","Transfer","lockTokens","onSubmit","event","preventDefault","formData","FormData","amount","parseFloat","get","lockSeconds","step","name","placeholder","required","value","Withdraw","withdrawTokens","disabled","TransactionErrorMessage","substring","WaitingForTransactionMessage","txHash","NoTokensMessage","selectedAddress","contractAddress","contractAddresses","Dapp","props","initialState","tokenData","undefined","balance","txBeingSent","transactionError","state","window","ethereum","this","ethers","utils","formatEther","Date","lockedUntil","toNumber","toLocaleDateString","_getRpcErrorMessage","_dismissTransactionError","availableEth","eq","gt","_hodlTokens","_withdrawTokens","now","_connectWallet","_dismissNetworkError","_stopPollingData","enable","_checkNetwork","_initialize","on","newAddress","_resetState","userAddress","setState","_intializeEthers","_startPollingData","_provider","providers","Web3Provider","_autohodl","Contract","Autohodl","TokenArtifact","abi","getSigner","_pollDataInterval","setInterval","_updateBalance","clearInterval","getBalance","balanceOf","lockedUntilOf","_sendTransaction","hodl","parseUnits","toString","withdraw","transaction","tx","hash","wait","status","Error","console","error","data","networkVersion","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abe42ceb.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function NoWalletDetected() {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-6 p-4 text-center\">\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{\" \"}\n            <a\n              href=\"http://metamask.io\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function NetworkErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      {message}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { NetworkErrorMessage } from \"./NetworkErrorMessage\";\n\nexport function ConnectWallet({ connectWallet, networkError, dismiss }) {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-12 text-center\">\n          {/* Metamask network should be set to Localhost:8545. */}\n          {networkError && (\n            <NetworkErrorMessage \n              message={networkError} \n              dismiss={dismiss} \n            />\n          )}\n        </div>\n        <div className=\"col-6 p-4 text-center\">\n          <p>Please connect to your wallet.</p>\n          <button\n            className=\"btn btn-warning\"\n            type=\"button\"\n            onClick={connectWallet}\n          >\n            Connect Wallet\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Loading() {\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        zIndex: 2,\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        background: \"rgba(255, 255, 255, 0.5)\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          zIndex: 3,\n          top: \"50%\",\n          left: \"50%\",\n          width: \"100px\",\n          height: \"50px\",\n          marginLeft: \"-50px\",\n          marginTop: \" -25px\",\n          textAlign: \"center\",\n        }}\n      >\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Transfer({ lockTokens }) {\n  return (\n    <div>\n      <h4>Hodl</h4>\n      <form\n        onSubmit={(event) => {\n          // This function just calls the transferTokens callback with the\n          // form's data.\n          event.preventDefault();\n\n          const formData = new FormData(event.target);\n          const amount = parseFloat(formData.get(\"amount\"));\n          const lockSeconds = parseFloat(formData.get(\"lockDays\")) * 60 * 60 * 24;\n          if (amount && lockSeconds) {\n            lockTokens(amount, lockSeconds);\n          }\n        }}\n      >\n        <div className=\"form-group\">\n          <label>Amount of eth</label>\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            step=\"1\"\n            name=\"amount\"\n            placeholder=\"420.69\"\n            step=\"any\"\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Days to lock for</label>\n          <input className=\"form-control\" type=\"number\" name=\"lockDays\" placeholder=\"1\" required />\n        </div>\n        <div className=\"form-group\">\n          <input className=\"btn btn-primary\" type=\"submit\" value=\"Hodl\" />\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Withdraw({ withdrawTokens, disabled }) {\n  return (\n    <div>\n      <h6>Use this button to withdraw your eth (once the lock has expired)</h6>\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          withdrawTokens();\n        }}\n      >\n        <div className=\"form-group\">\n          <input\n            className=\"btn btn-primary\"\n            type=\"submit\"\n            value=\"Withdraw\"\n            disabled={disabled}\n          />\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function TransactionErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      Error sending transaction: {message.substring(0, 100)}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function WaitingForTransactionMessage({ txHash }) {\n  return (\n    <div className=\"alert alert-info\" role=\"alert\">\n      Waiting for transaction <strong>{txHash}</strong> to be mined\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function NoTokensMessage({ selectedAddress }) {\n  return (\n    <>\n      <p>You don't have anything to hodl!</p>\n    </>\n  );\n}\n","import React from \"react\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport TokenArtifact from \"../contracts/Autohodl.json\";\nimport contractAddresses from \"../contracts/contract-address.json\";\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { ConnectWallet } from \"./ConnectWallet\";\nimport { Loading } from \"./Loading\";\nimport { Transfer } from \"./Transfer\";\nimport { Withdraw } from \"./Withdraw\";\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\nimport { NoTokensMessage } from \"./NoTokensMessage\";\n\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst network = 'ropsten';\nconst networkVersions = {\n  hardhat: '31337',\n  ropsten: '3'\n};\nconst networkVersion = networkVersions[network];\nconst contractAddress = contractAddresses[network];\n\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n    };\n\n    this.state = this.initialState;\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n    // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the ConnectWallet component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n    if (!this.state.selectedAddress) {\n      return (\n        <ConnectWallet \n          connectWallet={() => this._connectWallet()} \n          networkError={this.state.networkError}\n          dismiss={() => this._dismissNetworkError()}\n        />\n      );\n    }\n\n    // If the token data or the user's balance hasn't loaded yet, we show\n    // a loading component.\n    if (!this.state.balance) {\n      return <Loading />;\n    }\n\n    // If everything is loaded, we render the application.\n    return (\n      <div className=\"container p-4\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h1>\n              Autohodl\n            </h1>\n            <p>\n              Welcome <b>{this.state.selectedAddress}</b>, you have{\" \"}\n              <b>\n                {ethers.utils.formatEther(this.state.balance)}\n                {\" eth locked \"}\n              </b>\n              {(this.state.balance > 0) &&\n              <>until{\" \"}\n                <b>\n                  {new Date(this.state.lockedUntil.toNumber() * 1000).toLocaleDateString()}\n                </b>\n              .</>\n              }\n            </p>\n          </div>\n        </div>\n\n        <hr />\n\n        <div className=\"row\">\n          <div className=\"col-12\">\n            {/* \n              Sending a transaction isn't an immidiate action. You have to wait\n              for it to be mined.\n              If we are waiting for one, we show a message here.\n            */}\n            {this.state.txBeingSent && (\n              <WaitingForTransactionMessage txHash={this.state.txBeingSent} />\n            )}\n\n            {/* \n              Sending a transaction can fail in multiple ways. \n              If that happened, we show a message here.\n            */}\n            {this.state.transactionError && (\n              <TransactionErrorMessage\n                message={this._getRpcErrorMessage(this.state.transactionError)}\n                dismiss={() => this._dismissTransactionError()}\n              />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-12\">\n            {/*\n              If the user has no tokens, we don't show the Transfer form\n            */}\n            {this.state.availableEth.eq(0) && (\n              <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n            )}\n\n            {this.state.availableEth.gt(0) && (\n              <Transfer\n                lockTokens={(amount, lockSeconds) =>\n                  this._hodlTokens(amount, lockSeconds)\n                }\n              />\n            )}\n\n            {this.state.balance.gt(0) && (\n              <><hr />\n              <Withdraw\n                withdrawTokens={() =>\n                  this._withdrawTokens()\n                }\n                disabled={this.state.lockedUntil.toNumber() * 1000 > Date.now()}\n              /></>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable();\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n      \n      this._initialize(newAddress);\n    });\n    \n    // We reset the dapp state if the network is changed\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress,\n    });\n\n    // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n    this._intializeEthers();\n    this._startPollingData();\n  }\n\n  async _intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n    this._autohodl = new ethers.Contract(\n      contractAddress.Autohodl,\n      TokenArtifact.abi,\n      this._provider.getSigner(0)\n    );\n  }\n\n  // The next two methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000);\n\n    // We run it once immediately so we don't have to wait for it\n    this._updateBalance();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  // Read from the contract and store the results in the component state.\n  async _updateBalance() {\n    const availableEth = await this._provider.getBalance(this.state.selectedAddress);\n    const balance = await this._autohodl.balanceOf(this.state.selectedAddress);\n    const lockedUntil = await this._autohodl.lockedUntilOf(this.state.selectedAddress);\n    this.setState({ availableEth, balance, lockedUntil });\n  }\n\n  async _hodlTokens(amount, lockSeconds) {\n    await this._sendTransaction(() => this._autohodl.hodl(this.state.selectedAddress, lockSeconds, { value: ethers.utils.parseUnits(amount.toString()) }));\n  }\n\n  async _withdrawTokens() {\n    await this._sendTransaction(() => this._autohodl.withdraw(this.state.selectedAddress));\n  }\n\n  async _sendTransaction(transaction) {\n    try {\n      this._dismissTransactionError();\n      const tx = await transaction();\n      this.setState({ txBeingSent: tx.hash });\n      const receipt = await tx.wait();\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n      await this._updateBalance();\n    } catch (error) {\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  // This is an utility method that turns an RPC error into a human readable\n  // message.\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n    return error.message;\n  }\n\n  // This method resets the state\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545 \n  _checkNetwork() {\n    if (window.ethereum.networkVersion === networkVersion) {\n      return true;\n    }\n\n    this.setState({ \n      networkError: `Please connect to ${network}`\n    });\n\n    return false;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Dapp } from \"./components/Dapp\";\n\n// We import bootstrap here, but you can remove if you want\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// This is the entry point of your application, but it just renders the Dapp\n// react component. All of the logic is contained in it.\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dapp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}